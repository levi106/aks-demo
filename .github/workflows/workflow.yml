name: 'Deploy'

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_VAR_resource_group: ${{ secrets.AKS_RESOURCE_GROUP }}
      TF_VAR_cluster_name: ${{ secrets.AKS_CLUSTER_NAME }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    defaults:
      run:
        working-directory: 'infrastructures/azure'
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure Azure credentials
      run: |
        echo ::set-env name=ARM_CLIENT_ID::$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId' )
        echo ::set-env name=ARM_CLIENT_SECRET::$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret' )
        echo ::set-env name=ARM_SUBSCRIPTION_ID::$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId' )
        echo ::set-env name=ARM_TENANT_ID::$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId' )
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["**/*.tf"]'
      env:
        BACKEND_RESOURCE_GROUP: ${{ secrets.BACKEND_RESOURCE_GROUP }}
        BACKEND_STORAGE_ACCOUNT: ${{ secrets.BACKEND_STORAGE_ACCOUNT }}
        BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Format
      run: terraform fmt
      continue-on-error: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Plan
      run: terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
    
  deploy-argocd:
    name: 'Deploy Argo CD'
    runs-on: ubuntu-latest
    needs: terraform
    steps:
    - uses: actions/checkout@v2

    - uses: instrumenta/kubeval-action@master
      with:
        files: ./infrastructures/argo-cd/

    - uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: '${{ secrets.AKS_CLUSTER_NAME }}'
        resource-group: '${{ secrets.AKS_RESOURCE_GROUP }}'

    - run: |
        kubectl create namespace argocd --dry-run -o json | kubectl apply -f -

    - uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          infrastructures/argo-cd/install.yaml
        namespace: argocd
